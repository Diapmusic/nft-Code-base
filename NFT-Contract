// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/proxy/Proxy.sol";
import "@openzeppelin/contracts/utils/Address.sol";

import "./interfaces/IERC721Community.sol";


type StartFromTokenIdOne is bool;

contract ERC721Community is Proxy {
    address internal constant proxyImplementation =
        0x721721001Ac55A3Ef34565b9320B29B47135597f;

    StartFromTokenIdOne internal constant START_FROM_ONE = StartFromTokenIdOne.wrap(true);
    StartFromTokenIdOne internal constant START_FROM_ZERO = StartFromTokenIdOne.wrap(false);

    constructor(
        string memory name,
        string memory symbol,
        uint256 maxSupply,
        uint256 nReserved,
        StartFromTokenIdOne startAtOne,
        string memory uri,
        MintConfig memory configValues
    ) {
        Address.functionDelegateCall(
            proxyImplementation,
            abi.encodeWithSelector(
                IERC721CommunityImplementation.initialize.selector,
                name,
                symbol,
                maxSupply,
                nReserved,
                startAtOne,
                uri,
                configValues
            )
        );
    }

    function implementation() public pure returns (address) {
        return _implementation();
    }

    function _implementation() internal pure override returns (address) {
        return address(proxyImplementation);
    }
}
